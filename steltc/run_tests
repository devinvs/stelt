#!/usr/bin/python3
import sys
import json
import os
import subprocess
import time

def error(s):
    print("\x1b[31m" + s + "\x1b[0m")

def success(s):
    print("\x1b[32m" + s + "\x1b[0m")

os.system(f"cargo build --release")
n = 0
s = 0
for f in os.listdir("./tests"):
    n += 1

    comp_start = time.time()
    if os.system(f"cargo run -q --release -- tests/{f}/main.st") != 0:
        error(f"{f} failed to compile")
        continue
    comp_end = time.time()

    spec_file = open(f"tests/{f}/spec.json")
    spec = json.loads(spec_file.read())

    if "code" not in spec:
        spec["code"] = 0

    if "stdin" not in spec:
        spec["stdin"] = ""

    if "stdout" not in spec:
        spec["stdout"] = ""

    # launch the program, write to stdin, check against stdout, return code
    run_start = time.time()
    p = subprocess.run(["./build/main"], capture_output=True, input=spec["stdin"])
    run_end = time.time()

    if p.returncode != spec["code"]:
        error(f"{f} failed: got retcode {p.returncode} expected {spec["code"]}")
        continue

    stdout = p.stdout.decode("utf-8")
    if stdout != spec["stdout"]:
        error(f"{f} failed: got stdout {stdout} expected {spec["stdout"]}")
        continue

    s += 1
    success(f"{f:15s}: comp={comp_end-comp_start:.4f}, run={run_end-run_start:.4f}")

print("\n{s} / {n} tests succeeded")
